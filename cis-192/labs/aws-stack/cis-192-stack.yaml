AWSTemplateFormatVersion: 2010-09-09
Description: The CIS-192 Network

Resources:

  #
  # Create the VPC for CIS-192 Networks and related infrastructure.
  #

  CIS192Cloud:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      Tags:
        -
          Key: Application
          Value: !Ref AWS::StackId

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref CIS192Cloud
      AmazonProvidedIpv6CidrBlock: true

  Gateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Application
          Value: !Ref AWS::StackId

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - CIS192Cloud
      - Gateway
    Properties:
      VpcId: !Ref CIS192Cloud
      InternetGatewayId: !Ref Gateway

  Routing:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CIS192Cloud

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - Gateway
    Properties:
       RouteTableId: !Ref Routing
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref Gateway

  DefaultIpv6Route:
    Type: AWS::EC2::Route
    DependsOn:
      - Gateway
      - Routing
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref Routing
      GatewayId: !Ref Gateway

  #
  # Create the external network
  #

  ExternalSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: 
      - IPv6CidrBlock
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.192.1.0/24
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt CIS192Cloud.Ipv6CidrBlocks ]]]
      MapPublicIpOnLaunch: True
      VpcId: !Ref CIS192Cloud
      Tags:
        -
          Key: Application
          Value: !Ref AWS::StackId

  ExternalSubnetRoute:
    DependsOn:
      - ExternalSubnet
      - Routing
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ExternalSubnet
      RouteTableId: !Ref Routing

  ExternalACL:
    Type: AWS::EC2::NetworkAcl
    DependsOn:
      - CIS192Cloud
    Properties:
      VpcId: !Ref CIS192Cloud

  AllowIngressAllExternalIpv4:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - ExternalACL
    Properties:
      NetworkAclId: !Ref ExternalACL
      RuleNumber: 10
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  AllowEgressAllExternalIpv4:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - ExternalACL
    Properties:
      NetworkAclId: !Ref ExternalACL
      RuleNumber: 10
      Egress: true
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  AllowIngressAllExternalIpv6:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - ExternalACL
    Properties:
      NetworkAclId: !Ref ExternalACL
      RuleNumber: 20
      Protocol: -1
      RuleAction: allow
      Ipv6CidrBlock: ::0/0

  AllowEgressAllExternalIpv6:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - ExternalACL
    Properties:
      NetworkAclId: !Ref ExternalACL
      RuleNumber: 20
      Egress: true
      Protocol: -1
      RuleAction: allow
      Ipv6CidrBlock: ::0/0

  ExternalACLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     DependsOn:
       - ExternalSubnet
       - ExternalACL
     Properties:
       SubnetId: !Ref ExternalSubnet
       NetworkAclId: !Ref ExternalACL

  #
  # Create a security group that allows all traffic.
  #

  WideOpenSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CIS192Cloud
    Properties:
      GroupDescription: Allow all traffic.
      GroupName: Wide Open
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIpv6: ::0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIpv6: ::0/0
      Tags:
        -
          Key: Application
          Value: !Ref AWS::StackId
      VpcId: !Ref CIS192Cloud

  #
  # Create the Application Server.
  #
  AppServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - ExternalSubnet
      - WideOpenSecurityGroup
    Properties:
      AvailabilityZone: us-east-1a
      KeyName: cis192
      ImageId: ami-0758470213bdd23b1 # Ubuntu Focal
      InstanceType: t2.nano
      NetworkInterfaces:
        - DeviceIndex: 0
          Ipv6AddressCount: 1
          PrivateIpAddress: 10.192.1.101
          SubnetId: !Ref ExternalSubnet
          GroupSet:
            - !Ref WideOpenSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 64
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  # 
  # Create an elastic IP address for the server
  #
  PublicIP:
    Type: AWS::EC2::EIP
    DependsOn:
      - AppServer
    Properties: 
      Domain: vpc
      InstanceId: !Ref AppServer
      Tags: 
        - Key: Application
          Value: !Ref AWS::StackId
