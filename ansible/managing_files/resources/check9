#!/bin/bash
# Check Lab 9
# Usage check9 [username]

thisProgram=$(basename $0)
stroke="good job!"
turninDir=/home/mmatera/turnin
lab="Lab 9"

if [ "$1" == "" ]; then 
  username=$LOGNAME
	homeDir=$HOME
else
  username=$1
	tempdir=$(mktemp -d)
	trap 'rm -rf $tempdir' EXIT 
	tar -C $tempdir -xvf "$1" 
	homeDir=$tempdir
fi

cd $home
echo "HOME IS $homeDir"

function abort () {
  echo
  echo '*** FIX THIS *** and try again!'
  exit 1
}

function horizontalLine () {
  echo "--------------------------------------------------------------"
}

function showStep () {
  s=$1
  clear
  echo "=============================================================="
  echo "$lab - $s"
  echo "=============================================================="
}

function pause () {
  read -p "Press Enter to continue" dummy
}

function checkFileExists () {
  pFile=$1
  pMsg=$2
  echo
  echo $pMsg 
  if [ -r "$pFile" ]; then
    echo "Regular file $pFile found - $stroke"
    pause
  else
    echo "$pFile not found"
    abort
  fi
}

function checkFileLines () {
  pFile=$1
  expectedLines=$2
  pMsg=$3
  echo
  horizontalLine
  echo $pMsg
  cat -n $pFile
  actualLines=$(cat $pFile | wc -l)
  echo
  if [ ! "$expectedLines" == "$actualLines" ]; then
    echo "WARNING: expected $expectedLines lines in $pFile but found $actualLines"
  else
    echo "$pFile has $expectedLines line(s) as expected - $stroke"
  fi
  horizontalLine
  pause
}

function checkFileContains () {
  pFile=$1
  pString=$2
  #echo "TRACE: grep "$pString" $pFile"
  echo
  grep "$pString" $pFile > /dev/null 2> /dev/null 
  if [ ! "$?" == "0" ]; then
    echo "Could not find line with" '"'$pString'"' "in $(basename $pFile)"
    abort
  else 
    echo "Found line with" '"'$pString'"' "- $stroke"
    pause
  fi
}

function checkFileDoesNotContain () {
  pFile=$1
  pString=$2
  #echo "TRACE: grep "$pString" $pFile"
  echo
  grep "$pString" $pFile > /dev/null 2> /dev/null
  if [ ! "$?" == "0" ]; then
    echo "$(basename $pFile) does not contain" '"'$pString'"' "- $stroke"
    pause
  else
    echo "Found" '"'$pString'"' "in $(basename $pFile)"
    abort
  fi
}



function checkFileExecutes () {
  pFile=$1
  horizontalLine
  echo "Attempting to run $pfile"
  $pFile  
  horizontalLine
}

function checkOutput () {
  pPrompt=$1
  read -p "$pPrompt (y or n) [y]: " answer
  if [ "$answer" == "" ]; then 
    answer="y"
  fi 
  if [ ! "$answer" == "y" ]; then 
    abort
  fi
}


function checkFilePerms () {
  pFile=$1
  expectedPerms=$2
  ls -l $pFile
  actualPerms=$(ls -ld $pFile | cut -c2-10)
  if [ ! "$expectedPerms" == "$actualPerms" ]; then
     echo "Permissions on $(basename $pFile) are not $expectedPerms"
     abort
  else
    echo " $expectedPerms permissions set correctly on $(basename $pFile) - $stroke"
  fi
}
 
function checkHomeFile () {
  step="Step 1 and Step 4 - home file"
  showStep "$step"
  checkFileExists $homeDir/bin/home "Check for home script in student's bin/ directory:"
  checkFileLines $homeDir/bin/home 5 "Check number of lines in home script"
  checkFileContains $homeDir/bin/home cd
  checkFileContains $homeDir/bin/home clear
  checkFileContains $homeDir/bin/home "echo This is the home directory of"
  checkFileContains $homeDir/bin/home "echo ==================="
  checkFileContains $homeDir/bin/home "ls -F"

  clear 
  step="Step 2 - home file"
  showStep "$step"
  echo; echo "Check permissions on home:"
  checkFilePerms $homeDir/bin/home "rwxr-xr-x"
  pause

  clear
  step="Step 3 - home file"
  showStep "$step"
  echo;echo "Now let's run the home script and see what it does"
  echo "It should clear the page, print a title and then list all home directory files."
  pause
  checkFileExecutes $homeDir/bin/home
  checkOutput "Do you see the title and a -F style listing of your home directory?"
}

function checkSmallTownFile () {
  clear
  step="Step 7 - small_town file"
  showStep "$step"
  checkFileDoesNotContain $homeDir/edits/small_town "airporttttt"
  checkFileDoesNotContain $homeDir/edits/small_town "runaway"
  checkFileContains $homeDir/edits/small_town "The airport runway is terraced"
  checkFileDoesNotContain $homeDir/edits/small_town "busssssiness"
  checkFileDoesNotContain $homeDir/edits/small_town "business on town"
  checkFileContains $homeDir/edits/small_town "The biggest business in town sells farm machinery"
  checkFileDoesNotContain $homeDir/edits/small_town "cna't"
  checkFileContains $homeDir/edits/small_town "You can't walk for exercise because"
  checkFileDoesNotContain $homeDir/edits/small_town "dogg"
  checkFileContains $homeDir/edits/small_town "You speak to each dog you pass by name"
  checkFileDoesNotContain $homeDir/edits/small_town "noght"
  checkFileContains $homeDir/edits/small_town "Saturday night"
  checkFileDoesNotContain $homeDir/edits/small_town "Reprinter"
  checkFileContains $homeDir/edits/small_town "Reprinted from the Ayshire Empire News"
  checkFileDoesNotContain $homeDir/edits/small_town "ththanan"
  checkFileContains $homeDir/edits/small_town "than a moshpit"
  checkFileDoesNotContain $homeDir/edits/small_town "wrng"
  checkFileContains $homeDir/edits/small_town "dial a wrong number"
  checkFileDoesNotContain $homeDir/edits/small_town "xxxxx"
  checkFileDoesNotContain $homeDir/edits/small_town "youa"
  checkFileContains $homeDir/edits/small_town "sends you a get well card"
  checkFileDoesNotContain $homeDir/edits/small_town "going knows where you are going"
  checkFileContains $homeDir/edits/small_town "everyone knows where you are going."
  checkFileDoesNotContain $homeDir/edits/small_town "WHEN YOU'RE IN A SMALL TOWN WHEN"

  clear
  step="Step 7 (continued) - small_town file"
  showStep "$step"
  echo; echo Last 5 lines of small_town
  horizontalLine
  tail -5 $homeDir/edits/small_town
  horizontalLine
  checkOutput "Was \"Reprinted from the Ayshire Empire News\" moved to the bottom?"

  echo;echo Check now for duplicate lines:
  horizontalLine
  grep "YOU KNOW YOU'RE IN A SMALL TOWN WHEN..." $homeDir/edits/small_town
  horizontalLine
  echo "There should only be one \"YOU KNOW YOU'RE IN A SMALL TOWN WHEN...\" line above"
  checkOutput "Have the duplicate lines been removed?"

  clear
  step="Step 7 (continued) - small_town file"
  showStep "$step"
  clear
  echo;echo Check next for consistent indentation
  pause
  cat $homeDir/edits/small_town
  checkOutput "Is the overall indentation and spacing consistent?"
}

function checkWordsFile () {
  step="Step 9 - words file"
  showStep "$step"
  checkFileExists $homeDir/edits/words "Check for words file in student's edits/ directory:"
  echo; echo Check contents of words file
  cat $homeDir/edits/words
  checkOutput "All mispelled words removed except Ayshire and moshpit?"
}

function checkWomenFile () {
  step="Step 11 - women file"
  showStep "$step"
  checkFileExists $homeDir/edits/women "Check for women file in student's edits/ directory:"
  checkFileLines $homeDir/edits/women 1 "Check number of lines in home script"
  checkOutput "Do you see just: \"Now is the time for all good women to come to the aid of their party\" in women file"
}

function checkVocabFile () {
  step="Step 12 - vocab file"
  showStep "$step"
  checkFileExists $homeDir/edits/vocab "Check for vocab file in student's edits/ directory:"
  checkFileLines $homeDir/edits/vocab 26 "Check that vocab has at least 26 lines"
  horizontalLine
  clear; cat $homeDir/edits/vocab
  horizontalLine
  checkOutput "Are the languages in alphabetical order?"
  checkOutput "Was \"arrivando.\" tacked on to the Italian: line?"
  checkOutput "Was \"chegando.\" tacked on to the Portuguese: line?"
  checkOutput "Is the title \"Worldwide Game of Thrones Vocabulary\" the first line in the file?"
}

function checkLab9File () {
  turnedInFile="$homeDir/lab09"
  checkFileExists $turnedInFile "Check that lab9 file exists"
  horizontalLine
  echo Count the lines of home, small_town, words, women
  wc -l $homeDir/bin/home $homeDir/edits/{small_town,words,women}
  echo

  echo "Count the number of lines in the lab09 file:"
  wc -l $turnedInFile
  horizontalLine
  checkOutput "Does the lab9 line count reconcile with line counts of the individual files?" 
  pause

  echo; echo -n "Check that home file is included in lab09 file"
  checkFileContains $turnedInFile "=======" 

  echo; echo -n "Check that small_town file is included in lab09 file"
  checkFileContains $turnedInFile "listens to what you say" 

  echo; echo -n "Check that words file is included in lab09 file"
  checkFileContains $turnedInFile "Ayshire" 

  echo; echo -n "Check that woman file is included in lab09 file"
  checkFileContains $turnedInFile "Now is the time" 

  echo; echo -n "Check for successful submittal"
  checkFileContains $turninDir/lab09.$LOGNAME "SMALL"

}

function checkExtraCredit () {
  checkFileExists $homeDir/cis90_html/index.html "Check for default web page file"
  checkFileExists $homeDir/cis90_html/images/pengmovie.gif "Check for image gif file"
  checkFileExists $homeDir/cis90_html/css/base.css "Check for style sheet"
  clear  
  echo Now attempt to connect to web service and retrieve default web page
  wget -O /tmp/$$ http://opus-ii.cis.cabrillo.edu/~$username
  checkOutput "Was 100% of the web page retrieved and saved to /tmp/$$"  
  clear
  echo Check html page received from Apache httpd service
  horizontalLine
  cat /tmp/$$
  horizontalLine
  checkOutput "Do you see a modified index.html file?"
  pause
  rm /tmp/$$
}

function saveTarFile() {
  temptar=$(mktemp /tmp/files-$USER-XXXXXX.tar)
  tar -cf $temptar * 1>/dev/null 2>&1
  echo "=============================================================="
  echo Submit this tar file on Canvas\!
  echo "=============================================================="
  echo ""
  echo "I have created a tar file of your home directory in: "
  echo "" 
  echo $temptar
  echo ""
  pause
}

PTS="Points off [0]: "

while true 
do
  clear
  echo "
  =================================
   Lab 9 Checker for $first
  =================================

    1 = Check home file
    2 = Check small_town file
    3 = Check words file
    4 = Check women file
    5 = Check lab09 file
    6 = Check EVERYTHING (1-6 above)
    8 = Save your progress in a tar file 
    9 = exit
"
  read -p "    Enter selection: " reply
  case $reply in
    1) checkHomeFile
    ;;
    2) checkSmallTownFile
    ;;
    3) checkWordsFile
    ;;
    4) checkWomenFile
    ;;
#    5) checkVocabFile 
#    ;;
    5) checkLab9File
    ;;
    6) checkHomeFile
       checkSmallTownFile
       checkWordsFile
       checkWomenFile
       checkLab9File
    ;;
    #8) checkExtraCredit
    #;;
    8) saveTarFile  
    ;;
    9) break
    ;;
    *) echo "Oops, not a selection, try again!"
       pause
    ;;
  esac
done

exit
