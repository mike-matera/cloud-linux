---
- hosts: all
  name: Install JupyterHub on this server 
  become: yes
  tasks:
    - name: Install packages. 
      apt:
        update_cache: yes
        pkg:
          - python3-pip
          - python3-venv
          - npm
          - nodejs
          - nginx

    - name: Install Python wheel. 
      pip:
        virtualenv: /opt/jupyterhub
        virtualenv_command: /usr/bin/python3 -m venv
        name:
          - wheel 
    - name: Install JupyterHub.
      pip:
        virtualenv: /opt/jupyterhub
        virtualenv_command: /usr/bin/python3 -m venv
        name:
          - jupyterhub 
          - jupyterlab 
    - name: Install JS components.
      npm:
        name: configurable-http-proxy
        global: yes

    - name: Create the JupyterHub configuration
      file:
        path: /opt/jupyterhub/etc/jupyterhub
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Create default JupyterHub configuration 
      shell: /opt/jupyterhub/bin/jupyterhub --generate-config 
      args:
        chdir: /opt/jupyterhub/etc/jupyterhub
        creates: /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py        
    - name: Set JupyterLab to the default interface
      lineinfile:
        path: /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py
        regexp: 'c.Spawner.default_url'
        line: c.Spawner.default_url = '/lab' 
    - name: Set JupyterLab URL
      lineinfile:
        path: /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py
        regexp: 'c.JupyterHub.bind_url'
        line: c.JupyterHub.bind_url = 'http://:8000/jupyter'

    - name: Create the JupyterHub service 
      file:
        path: /opt/jupyterhub/etc/systemd
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Write JupyterHub serivce file. 
      blockinfile:
        path: /opt/jupyterhub/etc/systemd/jupyterhub.service
        create: yes
        block: |
          [Unit]
          Description=JupyterHub
          After=syslog.target network.target

          [Service]
          User=root
          Environment="PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/jupyterhub/bin"
          ExecStart=/opt/jupyterhub/bin/jupyterhub -f /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py

          [Install]
          WantedBy=multi-user.target
    - name: Install JupyterHub service. 
      file: 
        src: /opt/jupyterhub/etc/systemd/jupyterhub.service 
        dest: /etc/systemd/system/jupyterhub.service
        owner: root
        group: root
        state: link
    - name: Enable and start JupyterHub
      systemd:
        name: jupyterhub
        enabled: yes
        state: started

- hosts: all
  name: Configure nginx  
  become: yes
  vars:
    acme_challenge_type: http-01
    # Staging server for testing.
    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
    acme_version: 2
    acme_email: michael.matera@cabrillo.edu
    letsencrypt_dir: /etc/letsencrypt
    letsencrypt_keys_dir: /etc/letsencrypt/keys
    letsencrypt_csrs_dir: /etc/letsencrypt/csrs
    letsencrypt_certs_dir: /etc/letsencrypt/certs
    letsencrypt_account_key: /etc/letsencrypt/account/account.key
    domain_name: jupyter.cis.cabrillo.edu
  tasks:
    - name: Write basic nginx default configuration. 
      copy:
        src: nginx/skel_default.conf 
        dest: /etc/nginx/sites-available/default
        owner: root 
        group: root 
        mode: '0644'
    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted
    - name: "Create required directories in /etc/letsencrypt"
      file:
        path: "/etc/letsencrypt/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=x,o=x
      with_items:
      - account
      - certs
      - csrs
      - keys
    - name: "Generate a Let's Encrypt account key"
      shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"
    - name: "Generate Let's Encrypt private key"
      shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ domain_name }}.key"
    - name: "Generate Let's Encrypt CSR"
      shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }}\")) | sudo tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
      args:
        executable: /bin/bash
    - name: "Begin Let's Encrypt challenges"
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        terms_agreed: 1
        challenge: "{{ acme_challenge_type }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
        remaining_days: 91
      register: acme_challenge_your_domain
    - debug:
        var: acme_challenge_your_domain
        verbosity: 1
    - name: "Create .well-known/acme-challenge directory"
      file:
        path: /var/www/html/.well-known/acme-challenge
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
    - name: "Placce http-01 challenge files."
      copy:
        dest: /var/www/html/{{ item.key }}/{{ item.value['http-01']['resource'] }}
        content: "{{ item.value['http-01']['resource_value'] }}"
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      loop: "{{ acme_challenge_your_domain.challenge_data | dictsort }}"
      when: acme_challenge_your_domain is changed

    - name: "Complete Let's Encrypt challenges"
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        challenge: "{{ acme_challenge_type }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
        chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
        data: "{{ acme_challenge_your_domain }}"
    - name: Write production nginx default configuration. 
      copy:
        src: nginx/prod_default.conf 
        dest: /etc/nginx/sites-available/default
        owner: root 
        group: root 
        mode: '0644'
    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted
